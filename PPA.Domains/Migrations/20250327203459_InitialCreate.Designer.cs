// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PPA.Domains.Data;

#nullable disable

namespace PPA.Domains.Migrations
{
    [DbContext(typeof(PPADbContext))]
    [Migration("20250327203459_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("PPA.Domains.Entities.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AirportName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IATA")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal>("Lon")
                        .HasColumnType("decimal(9, 6)");

                    b.HasKey("Id");

                    b.ToTable("Airport", (string)null);
                });

            modelBuilder.Entity("PPA.Domains.Entities.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("PPA.Domains.Entities.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("PPA.Domains.Entities.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PPA.Domains.Entities.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("PPA.Domains.Entities.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("PPA.Domains.Entities.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PPA.Domains.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cancelation")
                        .HasColumnType("int");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UserDiscount")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_booking");

                    b.HasIndex("Cancelation");

                    b.HasIndex("User");

                    b.HasIndex("UserDiscount");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("PPA.Domains.Entities.Cancelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CanceledAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int?>("Refund")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Refund");

                    b.ToTable("Cancelation", (string)null);
                });

            modelBuilder.Entity("PPA.Domains.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Airport")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Airport");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("PPA.Domains.Entities.CityDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_RouteDiscount");

                    b.HasIndex("City");

                    b.HasIndex("Discount");

                    b.ToTable("CityDiscount", (string)null);
                });

            modelBuilder.Entity("PPA.Domains.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<string>("SeatClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_FlightPricing");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("PPA.Domains.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("PPA.Domains.Entities.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Arrival")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Departure")
                        .HasColumnType("datetime");

                    b.Property<int>("FlightRoute")
                        .HasColumnType("int");

                    b.Property<int>("FromCity")
                        .HasColumnType("int");

                    b.Property<int>("Plane")
                        .HasColumnType("int");

                    b.Property<int>("SeatsBooked")
                        .HasColumnType("int");

                    b.Property<int>("ToCity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlightRoute");

                    b.HasIndex("FromCity");

                    b.HasIndex("Plane");

                    b.HasIndex("ToCity");

                    b.ToTable("Flight", (string)null);
                });

            modelBuilder.Entity("PPA.Domains.Entities.FlightBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Booking")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int>("Flight")
                        .HasColumnType("int");

                    b.Property<int?>("FlightDiscount")
                        .HasColumnType("int");

                    b.Property<int>("Meal")
                        .HasColumnType("int");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Booking");

                    b.HasIndex("Class");

                    b.HasIndex("Flight");

                    b.HasIndex("FlightDiscount");

                    b.HasIndex("Meal");

                    b.ToTable("FlightBooking", (string)null);
                });

            modelBuilder.Entity("PPA.Domains.Entities.FlightRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Airport_1")
                        .HasColumnType("int");

                    b.Property<int>("Airport_2")
                        .HasColumnType("int");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int>("FlightTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Airport_1");

                    b.HasIndex("Airport_2");

                    b.ToTable("FlightRoute", null, t =>
                        {
                            t.HasTrigger("trg_CalculateDistance");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("PPA.Domains.Entities.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LocalMealFor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("LocalMealFor");

                    b.ToTable("Meal", (string)null);
                });

            modelBuilder.Entity("PPA.Domains.Entities.Plane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessSeats")
                        .HasColumnType("int");

                    b.Property<int>("EconomySeats")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Plane", (string)null);
                });

            modelBuilder.Entity("PPA.Domains.Entities.Refund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime>("RefundedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id");

                    b.ToTable("Refund", (string)null);
                });

            modelBuilder.Entity("PPA.Domains.Entities.UserDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Discount");

                    b.HasIndex("User");

                    b.ToTable("UserDiscount", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("PPA.Domains.Entities.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PPA.Domains.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PPA.Domains.Entities.AspNetRoleClaim", b =>
                {
                    b.HasOne("PPA.Domains.Entities.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PPA.Domains.Entities.AspNetUserClaim", b =>
                {
                    b.HasOne("PPA.Domains.Entities.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PPA.Domains.Entities.AspNetUserLogin", b =>
                {
                    b.HasOne("PPA.Domains.Entities.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PPA.Domains.Entities.AspNetUserToken", b =>
                {
                    b.HasOne("PPA.Domains.Entities.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PPA.Domains.Entities.Booking", b =>
                {
                    b.HasOne("PPA.Domains.Entities.Cancelation", "CancelationNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("Cancelation")
                        .HasConstraintName("FK_Cancelation");

                    b.HasOne("PPA.Domains.Entities.AspNetUser", "UserNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("User")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_AspNetUsers");

                    b.HasOne("PPA.Domains.Entities.UserDiscount", "UserDiscountNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("UserDiscount")
                        .HasConstraintName("FK_Booking_UserDiscount");

                    b.Navigation("CancelationNavigation");

                    b.Navigation("UserDiscountNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("PPA.Domains.Entities.Cancelation", b =>
                {
                    b.HasOne("PPA.Domains.Entities.Refund", "RefundNavigation")
                        .WithMany("Cancelations")
                        .HasForeignKey("Refund")
                        .HasConstraintName("FK_Cancelation_Refund");

                    b.Navigation("RefundNavigation");
                });

            modelBuilder.Entity("PPA.Domains.Entities.City", b =>
                {
                    b.HasOne("PPA.Domains.Entities.Airport", "AirportNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("Airport")
                        .HasConstraintName("FK_City_Airport");

                    b.Navigation("AirportNavigation");
                });

            modelBuilder.Entity("PPA.Domains.Entities.CityDiscount", b =>
                {
                    b.HasOne("PPA.Domains.Entities.City", "CityNavigation")
                        .WithMany("CityDiscounts")
                        .HasForeignKey("City")
                        .IsRequired()
                        .HasConstraintName("FK_CityDiscount_City");

                    b.HasOne("PPA.Domains.Entities.Discount", "DiscountNavigation")
                        .WithMany("CityDiscounts")
                        .HasForeignKey("Discount")
                        .IsRequired()
                        .HasConstraintName("FK_RouteDiscount_Discount");

                    b.Navigation("CityNavigation");

                    b.Navigation("DiscountNavigation");
                });

            modelBuilder.Entity("PPA.Domains.Entities.Flight", b =>
                {
                    b.HasOne("PPA.Domains.Entities.FlightRoute", "FlightRouteNavigation")
                        .WithMany("Flights")
                        .HasForeignKey("FlightRoute")
                        .IsRequired()
                        .HasConstraintName("FK_Flight_FlightRoute");

                    b.HasOne("PPA.Domains.Entities.City", "FromCityNavigation")
                        .WithMany("FlightFromCityNavigations")
                        .HasForeignKey("FromCity")
                        .IsRequired()
                        .HasConstraintName("FK_Flight_FromCity");

                    b.HasOne("PPA.Domains.Entities.Plane", "PlaneNavigation")
                        .WithMany("Flights")
                        .HasForeignKey("Plane")
                        .IsRequired()
                        .HasConstraintName("FK_Flight_Plane");

                    b.HasOne("PPA.Domains.Entities.City", "ToCityNavigation")
                        .WithMany("FlightToCityNavigations")
                        .HasForeignKey("ToCity")
                        .IsRequired()
                        .HasConstraintName("FK_Flight_ToCity");

                    b.Navigation("FlightRouteNavigation");

                    b.Navigation("FromCityNavigation");

                    b.Navigation("PlaneNavigation");

                    b.Navigation("ToCityNavigation");
                });

            modelBuilder.Entity("PPA.Domains.Entities.FlightBooking", b =>
                {
                    b.HasOne("PPA.Domains.Entities.Booking", "BookingNavigation")
                        .WithMany("FlightBookings")
                        .HasForeignKey("Booking")
                        .IsRequired()
                        .HasConstraintName("FK_FlightBooking_Booking");

                    b.HasOne("PPA.Domains.Entities.Class", "ClassNavigation")
                        .WithMany("FlightBookings")
                        .HasForeignKey("Class")
                        .IsRequired()
                        .HasConstraintName("FK_FlightBooking_Price");

                    b.HasOne("PPA.Domains.Entities.Flight", "FlightNavigation")
                        .WithMany("FlightBookings")
                        .HasForeignKey("Flight")
                        .IsRequired()
                        .HasConstraintName("FK_FlightBooking_Flight");

                    b.HasOne("PPA.Domains.Entities.CityDiscount", "FlightDiscountNavigation")
                        .WithMany("FlightBookings")
                        .HasForeignKey("FlightDiscount")
                        .HasConstraintName("FK_FlightBooking_CityDiscount");

                    b.HasOne("PPA.Domains.Entities.Meal", "MealNavigation")
                        .WithMany("FlightBookings")
                        .HasForeignKey("Meal")
                        .IsRequired()
                        .HasConstraintName("FK_FlightBooking_Meal");

                    b.Navigation("BookingNavigation");

                    b.Navigation("ClassNavigation");

                    b.Navigation("FlightDiscountNavigation");

                    b.Navigation("FlightNavigation");

                    b.Navigation("MealNavigation");
                });

            modelBuilder.Entity("PPA.Domains.Entities.FlightRoute", b =>
                {
                    b.HasOne("PPA.Domains.Entities.Airport", "Airport_1Navigation")
                        .WithMany("FlightRouteAirport_1Navigations")
                        .HasForeignKey("Airport_1")
                        .IsRequired()
                        .HasConstraintName("FK_Route_FromAirport");

                    b.HasOne("PPA.Domains.Entities.Airport", "Airport_2Navigation")
                        .WithMany("FlightRouteAirport_2Navigations")
                        .HasForeignKey("Airport_2")
                        .IsRequired()
                        .HasConstraintName("FK_Route_ToAirport");

                    b.Navigation("Airport_1Navigation");

                    b.Navigation("Airport_2Navigation");
                });

            modelBuilder.Entity("PPA.Domains.Entities.Meal", b =>
                {
                    b.HasOne("PPA.Domains.Entities.City", "LocalMealForNavigation")
                        .WithMany("Meals")
                        .HasForeignKey("LocalMealFor")
                        .HasConstraintName("FK_Meal_City");

                    b.Navigation("LocalMealForNavigation");
                });

            modelBuilder.Entity("PPA.Domains.Entities.UserDiscount", b =>
                {
                    b.HasOne("PPA.Domains.Entities.Discount", "DiscountNavigation")
                        .WithMany("UserDiscounts")
                        .HasForeignKey("Discount")
                        .IsRequired()
                        .HasConstraintName("FK_UserDiscount_Discount");

                    b.HasOne("PPA.Domains.Entities.AspNetUser", "UserNavigation")
                        .WithMany("UserDiscounts")
                        .HasForeignKey("User")
                        .IsRequired()
                        .HasConstraintName("FK_UserDiscount_AspNetUsers");

                    b.Navigation("DiscountNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("PPA.Domains.Entities.Airport", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("FlightRouteAirport_1Navigations");

                    b.Navigation("FlightRouteAirport_2Navigations");
                });

            modelBuilder.Entity("PPA.Domains.Entities.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("PPA.Domains.Entities.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("Bookings");

                    b.Navigation("UserDiscounts");
                });

            modelBuilder.Entity("PPA.Domains.Entities.Booking", b =>
                {
                    b.Navigation("FlightBookings");
                });

            modelBuilder.Entity("PPA.Domains.Entities.Cancelation", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("PPA.Domains.Entities.City", b =>
                {
                    b.Navigation("CityDiscounts");

                    b.Navigation("FlightFromCityNavigations");

                    b.Navigation("FlightToCityNavigations");

                    b.Navigation("Meals");
                });

            modelBuilder.Entity("PPA.Domains.Entities.CityDiscount", b =>
                {
                    b.Navigation("FlightBookings");
                });

            modelBuilder.Entity("PPA.Domains.Entities.Class", b =>
                {
                    b.Navigation("FlightBookings");
                });

            modelBuilder.Entity("PPA.Domains.Entities.Discount", b =>
                {
                    b.Navigation("CityDiscounts");

                    b.Navigation("UserDiscounts");
                });

            modelBuilder.Entity("PPA.Domains.Entities.Flight", b =>
                {
                    b.Navigation("FlightBookings");
                });

            modelBuilder.Entity("PPA.Domains.Entities.FlightRoute", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("PPA.Domains.Entities.Meal", b =>
                {
                    b.Navigation("FlightBookings");
                });

            modelBuilder.Entity("PPA.Domains.Entities.Plane", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("PPA.Domains.Entities.Refund", b =>
                {
                    b.Navigation("Cancelations");
                });

            modelBuilder.Entity("PPA.Domains.Entities.UserDiscount", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
